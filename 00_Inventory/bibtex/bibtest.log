This is pdfTeXk, Version 3.141592-1.40.3 (Web2C 7.5.6) (format=pdflatex 2015.10.2)  18 AUG 2016 22:55
entering extended mode
 %&-line parsing enabled.
**bibtest.tex
(./bibtest.tex
LaTeX2e <2005/12/01>
Babel <v3.8h> and hyphenation patterns for english, usenglishmax, dumylang, noh
yphenation, arabic, basque, bulgarian, coptic, welsh, czech, slovak, german, ng
erman, danish, esperanto, spanish, catalan, galician, estonian, farsi, finnish,
 french, greek, monogreek, ancientgreek, croatian, hungarian, interlingua, ibyc
us, indonesian, icelandic, italian, latin, mongolian, dutch, norsk, polish, por
tuguese, pinyin, romanian, russian, slovenian, uppersorbian, serbian, swedish, 
turkish, ukenglish, ukrainian, loaded.
(/usr/share/texmf/tex/latex/base/article.cls
Document Class: article 2005/09/16 v1.4f Standard LaTeX document class
(/usr/share/texmf/tex/latex/base/size10.clo
File: size10.clo 2005/09/16 v1.4f Standard LaTeX file (size option)
)
\c@part=\count79
\c@section=\count80
\c@subsection=\count81
\c@subsubsection=\count82
\c@paragraph=\count83
\c@subparagraph=\count84
\c@figure=\count85
\c@table=\count86
\abovecaptionskip=\skip41
\belowcaptionskip=\skip42
\bibindent=\dimen102
)
(/usr/share/texmf/tex/latex/hyperref/hyperref.sty
Package: hyperref 2007/02/07 v6.75r Hypertext links for LaTeX

(/usr/share/texmf/tex/latex/graphics/keyval.sty
Package: keyval 1999/03/16 v1.13 key=value parser (DPC)
\KV@toks@=\toks14
)
\@linkdim=\dimen103
\Hy@linkcounter=\count87
\Hy@pagecounter=\count88

(/usr/share/texmf/tex/latex/hyperref/pd1enc.def
File: pd1enc.def 2007/02/07 v6.75r Hyperref: PDFDocEncoding definition (HO)
)
(/usr/share/texmf/tex/latex/config/hyperref.cfg
File: hyperref.cfg 2002/06/06 v1.2 hyperref configuration of TeXLive
)
(/usr/share/texmf/tex/latex/oberdiek/kvoptions.sty
Package: kvoptions 2006/08/22 v2.4 Connects package keyval with LaTeX options (
HO)
)
Package hyperref Info: Hyper figures OFF on input line 2288.
Package hyperref Info: Link nesting OFF on input line 2293.
Package hyperref Info: Hyper index ON on input line 2296.
Package hyperref Info: Plain pages OFF on input line 2303.
Package hyperref Info: Backreferencing OFF on input line 2308.

Implicit mode ON; LaTeX internals redefined
Package hyperref Info: Bookmarks ON on input line 2444.
(/usr/share/texmf/tex/latex/ltxmisc/url.sty
\Urlmuskip=\muskip10
Package: url 2005/06/27  ver 3.2  Verb mode for urls, etc.
)
LaTeX Info: Redefining \url on input line 2599.
\Fld@menulength=\count89
\Field@Width=\dimen104
\Fld@charsize=\dimen105
\Choice@toks=\toks15
\Field@toks=\toks16
Package hyperref Info: Hyper figures OFF on input line 3102.
Package hyperref Info: Link nesting OFF on input line 3107.
Package hyperref Info: Hyper index ON on input line 3110.
Package hyperref Info: backreferencing OFF on input line 3117.
Package hyperref Info: Link coloring OFF on input line 3122.
\Hy@abspage=\count90
\c@Item=\count91
\c@Hfootnote=\count92
)
*hyperref using default driver hpdftex*
(/usr/share/texmf/tex/latex/hyperref/hpdftex.def
File: hpdftex.def 2007/02/07 v6.75r Hyperref driver for pdfTeX
\Fld@listcount=\count93
) (./biblatex.sty
Package: biblatex 2016/05/14 v3.4 programmable bibliographies (PK/JW/AB)
 (./iftex.sty
Package: iftex 2013/04/04 v0.2 Provides if(tex) conditional for PDFTeX, XeTeX, 
and LuaTeX
) (/usr/share/texmf/tex/latex_2015/oberdiek/pdftexcmds.sty
Package: pdftexcmds 2016/05/21 v0.22 Utility functions of pdfTeX for LuaTeX (HO
)

(/usr/share/texmf/tex/latex_2015/oberdiek/infwarerr.sty
Package: infwarerr 2016/05/16 v1.4 Providing info/warning/error messages (HO)
)
(/usr/share/texmf/tex/latex/oberdiek/ifluatex.sty
Package: ifluatex 2016/05/16 v1.4 Provides the ifluatex switch (HO)
Package ifluatex Info: LuaTeX not detected.
)
(/usr/share/texmf/tex/latex/oberdiek/ltxcmds.sty
Package: ltxcmds 2016/05/16 v1.23 LaTeX kernel commands for general use (HO)
)
(/usr/share/texmf/tex/latex/oberdiek/ifpdf.sty
Package: ifpdf 2016/05/14 v3.1 Provides the ifpdf switch
)
Package pdftexcmds Info: LuaTeX not detected.
Package pdftexcmds Info: \pdf@primitive disabled, because
(pdftexcmds)             \pdfprimitive is broken until pdfTeX 1.40.4.
Package pdftexcmds Info: \pdf@primitive is not available.
Package pdftexcmds Info: \pdf@ifprimitive is available.
Package pdftexcmds Info: \pdfdraftmode found.
)
(/usr/share/texmf/tex/latex_2015/etoolbox/etoolbox.sty
Package: etoolbox 2015/08/02 v2.2a e-TeX tools for LaTeX (JAW)

(/usr/share/texmf/tex/latex/etex/etex.sty
Package: etex 1998/03/26 v2.0 eTeX basic definition package (PEB)
\et@xins=\count94
)
\etb@tempcnta=\count95
)
(/usr/share/texmf/tex/latex_2015/logreq/logreq.sty
Package: logreq 2010/08/04 v1.0 xml request logger
\lrq@indent=\count96

(/usr/share/texmf/tex/latex_2015/logreq/logreq.def
File: logreq.def 2010/08/04 v1.0 logreq spec v1.0
))
(/usr/share/texmf/tex/latex/base/ifthen.sty
Package: ifthen 2001/05/26 v1.1c Standard LaTeX ifthen package (DPC)
) (./xstring.sty (./xstring.tex
\@xs@message=\write3
\integerpart=\count97
\decimalpart=\count98
)
Package: xstring 2013/10/13  v1.7c  String manipulations (C Tellechea)
)
\c@tabx@nest=\count99
\c@listtotal=\count100
\c@listcount=\count101
\c@liststart=\count102
\c@liststop=\count103
\c@citecount=\count104
\c@citetotal=\count105
\c@multicitecount=\count106
\c@multicitetotal=\count107
\c@instcount=\count108
\c@maxnames=\count109
\c@minnames=\count110
\c@maxitems=\count111
\c@minitems=\count112
\c@citecounter=\count113
\c@savedcitecounter=\count114
\c@uniquelist=\count115
\c@uniquename=\count116
\c@refsection=\count117
\c@refsegment=\count118
\c@maxextratitle=\count119
\c@maxextratitleyear=\count120
\c@maxextrayear=\count121
\c@maxextraalpha=\count122
\c@abbrvpenalty=\count123
\c@highnamepenalty=\count124
\c@lownamepenalty=\count125
\c@maxparens=\count126
\c@parenlevel=\count127
\blx@tempcnta=\count128
\blx@tempcntb=\count129
\blx@tempcntc=\count130
\blx@maxsection=\count131
\blx@maxsegment@0=\count132
\blx@notetype=\count133
\blx@parenlevel@text=\count134
\blx@parenlevel@foot=\count135
\blx@sectionciteorder@0=\count136
\labelnumberwidth=\skip43
\labelalphawidth=\skip44
\biblabelsep=\skip45
\bibitemsep=\skip46
\bibnamesep=\skip47
\bibinitsep=\skip48
\bibparsep=\skip49
\bibhang=\skip50
\blx@bcfin=\read1
\blx@bcfout=\write4
\c@mincomprange=\count137
\c@maxcomprange=\count138
\c@mincompwidth=\count139
Package biblatex Info: Trying to load biblatex default data model...
Package biblatex Info: ... file 'blx-dm.def' found.

(/usr/share/texmf/tex/latex_2015/biblatex/blx-dm.def)
! Undefined control sequence.
l.5191 \ProcessLocalKeyvalOptions
                                 {blx@opt@eldt}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.


! LaTeX Error: Missing \begin{document}.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.5191 \ProcessLocalKeyvalOptions{b
                                   lx@opt@eldt}
You're in trouble here.  Try typing  <return>  to proceed.
If that doesn't work, type  X <return>  to quit.

Package biblatex Info: Trying to load biblatex custom data model...
Package biblatex Info: ... file 'biblatex-dm.cfg' not found.
! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@constant@optiondatatypes 
l.5230 ...odel@constant@optiondatatypes\endcsname}
                                                  
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\cslet ...>\expandafter \let \csname #1\endcsname 
                                                  #2
l.5230 ...odel@constant@optiondatatypes\endcsname}
                                                  
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@constant@optiondatatypes 
l.5230 ...odel@constant@optiondatatypes\endcsname}
                                                  
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\cslet ...>\expandafter \let \csname #1\endcsname 
                                                  #2
l.5230 ...odel@constant@optiondatatypes\endcsname}
                                                  
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@constant@optiondatatypes 
l.5230 ...odel@constant@optiondatatypes\endcsname}
                                                  
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\cslet ...>\expandafter \let \csname #1\endcsname 
                                                  #2
l.5230 ...odel@constant@optiondatatypes\endcsname}
                                                  
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@constant@optiondatatypes 
l.5230 ...odel@constant@optiondatatypes\endcsname}
                                                  
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\cslet ...>\expandafter \let \csname #1\endcsname 
                                                  #2
l.5230 ...odel@constant@optiondatatypes\endcsname}
                                                  
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@constant@optiondatatypes 
l.5230 ...odel@constant@optiondatatypes\endcsname}
                                                  
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\cslet ...>\expandafter \let \csname #1\endcsname 
                                                  #2
l.5230 ...odel@constant@optiondatatypes\endcsname}
                                                  
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@dates 
l.5365 \abx@dodates
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@dates 
l.5365 \abx@dodates
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5380 \abx@donames
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5380 \abx@donames
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\cslet ...>\expandafter \let \csname #1\endcsname 
                                                  #2
l.5380 \abx@donames
                   
I'm ignoring this, since I wasn't doing a \csname.


! LaTeX Error: Missing \begin{document}.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.5380 \abx@donames
                   
You're in trouble here.  Try typing  <return>  to proceed.
If that doesn't work, type  X <return>  to quit.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5412 \abx@donames
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\ifcsdef #1->\ifcsname #1\endcsname 
                                    \expandafter \@firstoftwo \else \expanda...
l.5412 \abx@donames
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5412 \abx@donames
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5412 \abx@donames
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
<recently read> \endcsname 
                           
l.5412 \abx@donames
                   
I'm ignoring this, since I wasn't doing a \csname.

! You can't use `\relax' after \the.
<recently read> \blx@datamodel@names 
                                     
l.5412 \abx@donames
                   
I'm forgetting what you said and using zero instead.


! LaTeX Error: Missing \begin{document}.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.5412 \abx@donames
                   
You're in trouble here.  Try typing  <return>  to proceed.
If that doesn't work, type  X <return>  to quit.

! Extra \endcsname.
<argument> ... the\blx@datamodel@names \endcsname 
                                                  
l.5412 \abx@donames
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5412 \abx@donames
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\newcounter ...ifdefinable \csname c@#1\endcsname 
                                                  {\@definecounter {#1}}\@if...
l.5412 \abx@donames
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5412 \abx@donames
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

\c@=\count140
! Extra \endcsname.
\H@definecounter ...wcount \csname c@#1\endcsname 
                                                  \setcounter {#1}\z@ \globa...
l.5412 \abx@donames
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5412 \abx@donames
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5412 \abx@donames
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing number, treated as zero.
<to be read again> 
                   \blx@datamodel@names 
l.5412 \abx@donames
                   
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Extra \endcsname.
<argument> ...e c@\blx@datamodel@names \endcsname 
                                                  \z@ \relax 
l.5412 \abx@donames
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing number, treated as zero.
<to be read again> 
                   \relax 
l.5412 \abx@donames
                   
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \relax 
l.5412 \abx@donames
                   
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, nd, nc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5412 \abx@donames
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\H@definecounter ... \let \csname cl@#1\endcsname 
                                                  \@empty \@addtoreset {#1}{...
l.5412 \abx@donames
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5412 \abx@donames
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5412 \abx@donames
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\H@definecounter ...r \let \csname p@#1\endcsname 
                                                  \@empty \expandafter \gdef...
l.5412 \abx@donames
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5412 \abx@donames
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5412 \abx@donames
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5412 \abx@donames
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\newcounter ...ifdefinable \csname c@#1\endcsname 
                                                  {\@definecounter {#1}}\@if...
l.5412 \abx@donames
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5412 \abx@donames
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Use of \the doesn't match its definition.
<write> ...=\string \count \the \allocationnumber 
                                                  
l.5412 \abx@donames
                   
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

\c@saved=\count
! Extra \endcsname.
\H@definecounter ...wcount \csname c@#1\endcsname 
                                                  \setcounter {#1}\z@ \globa...
l.5412 \abx@donames
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5412 \abx@donames
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5412 \abx@donames
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing number, treated as zero.
<to be read again> 
                   \blx@datamodel@names 
l.5412 \abx@donames
                   
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Extra \endcsname.
<argument> ...aved\blx@datamodel@names \endcsname 
                                                  \z@ \relax 
l.5412 \abx@donames
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing number, treated as zero.
<to be read again> 
                   \relax 
l.5412 \abx@donames
                   
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \relax 
l.5412 \abx@donames
                   
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, nd, nc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5412 \abx@donames
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\H@definecounter ... \let \csname cl@#1\endcsname 
                                                  \@empty \@addtoreset {#1}{...
l.5412 \abx@donames
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5412 \abx@donames
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5412 \abx@donames
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\H@definecounter ...r \let \csname p@#1\endcsname 
                                                  \@empty \expandafter \gdef...
l.5412 \abx@donames
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5412 \abx@donames
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5412 \abx@donames
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Use of \the doesn't match its definition.
<write> ...=\string \count \the \allocationnumber 
                                                  
l.5413 \abx@dornames
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

\c@labelname=\count
! Use of \the doesn't match its definition.
<write> ...=\string \count \the \allocationnumber 
                                                  
l.5413 \abx@dornames
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

\c@savedlabelname=\count
! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@lists 
l.5414 \abx@dolists
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\ifcsdef #1->\ifcsname #1\endcsname 
                                    \expandafter \@firstoftwo \else \expanda...
l.5414 \abx@dolists
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@lists 
l.5414 \abx@dolists
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@lists 
l.5414 \abx@dolists
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
<recently read> \endcsname 
                           
l.5414 \abx@dolists
                   
I'm ignoring this, since I wasn't doing a \csname.

! Use of \the doesn't match its definition.
<recently read> \blx@datamodel@lists 
                                     
l.5414 \abx@dolists
                   
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra \endcsname.
<argument> ... the\blx@datamodel@lists \endcsname 
                                                  
l.5414 \abx@dolists
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@lists 
l.5414 \abx@dolists
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.


! LaTeX Error: Command \c@ already defined.
               Or name \end... illegal, see p.192 of the manual.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.5414 \abx@dolists
                   
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Extra \endcsname.
\newcounter ...ifdefinable \csname c@#1\endcsname 
                                                  {\@definecounter {#1}}\@if...
l.5414 \abx@dolists
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@lists 
l.5414 \abx@dolists
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Use of \the doesn't match its definition.
<write> ...=\string \count \the \allocationnumber 
                                                  
l.5414 \abx@dolists
                   
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

\c@=\count
! Extra \endcsname.
\H@definecounter ...wcount \csname c@#1\endcsname 
                                                  \setcounter {#1}\z@ \globa...
l.5414 \abx@dolists
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@lists 
l.5414 \abx@dolists
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@lists 
l.5414 \abx@dolists
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing number, treated as zero.
<to be read again> 
                   \blx@datamodel@lists 
l.5414 \abx@dolists
                   
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Extra \endcsname.
<argument> ...e c@\blx@datamodel@lists \endcsname 
                                                  \z@ \relax 
l.5414 \abx@dolists
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing number, treated as zero.
<to be read again> 
                   \relax 
l.5414 \abx@dolists
                   
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \relax 
l.5414 \abx@dolists
                   
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, nd, nc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@lists 
l.5414 \abx@dolists
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\H@definecounter ... \let \csname cl@#1\endcsname 
                                                  \@empty \@addtoreset {#1}{...
l.5414 \abx@dolists
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@lists 
l.5414 \abx@dolists
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@lists 
l.5414 \abx@dolists
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\H@definecounter ...r \let \csname p@#1\endcsname 
                                                  \@empty \expandafter \gdef...
l.5414 \abx@dolists
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@lists 
l.5414 \abx@dolists
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@lists 
l.5414 \abx@dolists
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@lists 
l.5414 \abx@dolists
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.


! LaTeX Error: Command \c@saved already defined.
               Or name \end... illegal, see p.192 of the manual.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.5414 \abx@dolists
                   
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Extra \endcsname.
\newcounter ...ifdefinable \csname c@#1\endcsname 
                                                  {\@definecounter {#1}}\@if...
l.5414 \abx@dolists
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@lists 
l.5414 \abx@dolists
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Use of \the doesn't match its definition.
<write> ...=\string \count \the \allocationnumber 
                                                  
l.5414 \abx@dolists
                   
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

\c@saved=\count
! Extra \endcsname.
\H@definecounter ...wcount \csname c@#1\endcsname 
                                                  \setcounter {#1}\z@ \globa...
l.5414 \abx@dolists
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@lists 
l.5414 \abx@dolists
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@lists 
l.5414 \abx@dolists
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing number, treated as zero.
<to be read again> 
                   \blx@datamodel@lists 
l.5414 \abx@dolists
                   
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Extra \endcsname.
<argument> ...aved\blx@datamodel@lists \endcsname 
                                                  \z@ \relax 
l.5414 \abx@dolists
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing number, treated as zero.
<to be read again> 
                   \relax 
l.5414 \abx@dolists
                   
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \relax 
l.5414 \abx@dolists
                   
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, nd, nc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@lists 
l.5414 \abx@dolists
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\H@definecounter ... \let \csname cl@#1\endcsname 
                                                  \@empty \@addtoreset {#1}{...
l.5414 \abx@dolists
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@lists 
l.5414 \abx@dolists
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@lists 
l.5414 \abx@dolists
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\H@definecounter ...r \let \csname p@#1\endcsname 
                                                  \@empty \expandafter \gdef...
l.5414 \abx@dolists
                   
I'm ignoring this, since I wasn't doing a \csname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@lists 
l.5414 \abx@dolists
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@lists 
l.5414 \abx@dolists
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Use of \the doesn't match its definition.
<write> ...=\string \count \the \allocationnumber 
                                                  
l.5414 \abx@dolists
                   
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

\c@pageref=\count
! Use of \the doesn't match its definition.
<write> ...=\string \count \the \allocationnumber 
                                                  
l.5414 \abx@dolists
                   
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

\c@savedpageref=\count
! Use of \the doesn't match its definition.
\g@addto@macro ...fter {#1#2}\xdef #1{\the \toks@ 
                                                  }\endgroup 
l.5421   \abx@dolists}
                      
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5424 \abx@dobooleans
                      
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.5424 \abx@dobooleans
                      
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\cslet ...>\expandafter \let \csname #1\endcsname 
                                                  #2
l.5424 \abx@dobooleans
                      
I'm ignoring this, since I wasn't doing a \csname.


! LaTeX Error: Missing \begin{document}.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.5424 \abx@dobooleans
                      
You're in trouble here.  Try typing  <return>  to proceed.
If that doesn't work, type  X <return>  to quit.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@lists 
l.5424 \abx@dobooleans
                      
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\ifcsdef #1->\ifcsname #1\endcsname 
                                    \expandafter \@firstoftwo \else \expanda...
l.5424 \abx@dobooleans
                      
I'm ignoring this, since I wasn't doing a \csname.


! Package etoolbox Error: Toggle 'abx@bool@more\blx@datamodel@lists ' already d
efined.

See the etoolbox package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.5424 \abx@dobooleans
                      
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@labelfields 
l.5427 \abx@dolabelfields
                         
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.


! LaTeX Error: Missing \begin{document}.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.5427 \abx@dolabelfields
                         
You're in trouble here.  Try typing  <return>  to proceed.
If that doesn't work, type  X <return>  to quit.

! Extra \endcsname.
<argument> ...tamodel@labelfields width\endcsname 
                                                  
l.5427 \abx@dolabelfields
                         
I'm ignoring this, since I wasn't doing a \csname.

! Use of \the doesn't match its definition.
<write> ...e=\string \skip \the \allocationnumber 
                                                  
l.5427 \abx@dolabelfields
                         
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

\csname\endcsname=\skip
! Extra \endcsname.
<argument> ...tamodel@labelfields width\endcsname 
                                                  
l.5427 \abx@dolabelfields
                         
I'm ignoring this, since I wasn't doing a \csname.

! Use of \the doesn't match its definition.
\g@addto@macro ...fter {#1#2}\xdef #1{\the \toks@ 
                                                  }\endgroup 
l.6190          {}}}}
                     
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\g@addto@macro ...fter {#1#2}\xdef #1{\the \toks@ 
                                                  }\endgroup 
l.6245   \endgroup}
                   
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@labelfields 
l.6380 \abx@dolabelfields
                         
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@labelfields 
l.6380 \abx@dolabelfields
                         
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@labelfields 
l.6380 \abx@dolabelfields
                         
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Use of \the doesn't match its definition.
\g@addto@macro ...fter {#1#2}\xdef #1{\the \toks@ 
                                                  }\endgroup 
l.7080     {}}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\g@addto@macro ...fter {#1#2}\xdef #1{\the \toks@ 
                                                  }\endgroup 
l.7153 ...aux@fnpage#1#2{\blx@addpagesum{#1}{#2}}}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\g@addto@macro ...fter {#1#2}\xdef #1{\the \toks@ 
                                                  }\endgroup 
l.7545 ...efsection#1#2{\blx@addchecksum{#1}{#2}}}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\g@addto@macro ...fter {#1#2}\xdef #1{\the \toks@ 
                                                  }\endgroup 
l.7684 ...cument{\let\abx@aux@category\@gobbletwo}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\g@addto@macro ...fter {#1#2}\xdef #1{\the \toks@ 
                                                  }\endgroup 
l.8173   \let\abx@aux@fncount\@gobbletwo}
                                         
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\g@addto@macro ...fter {#1#2}\xdef #1{\the \toks@ 
                                                  }\endgroup 
l.8574 ...kref#1#2#3#4#5{\blx@addpagesum{#1}{#5}}}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\g@addto@macro ...fter {#1#2}\xdef #1{\the \toks@ 
                                                  }\endgroup 
l.9422   \fi}
             
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.10590 \abx@dolabelfields
                          
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.10590 \abx@dolabelfields
                          
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@labelfields 
l.10590 \abx@dolabelfields
                          
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Extra \endcsname.
\cslet ...>\expandafter \let \csname #1\endcsname 
                                                  #2
l.10590 \abx@dolabelfields
                          
I'm ignoring this, since I wasn't doing a \csname.


! LaTeX Error: Missing \begin{document}.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.10590 \abx@dolabelfields
                          
You're in trouble here.  Try typing  <return>  to proceed.
If that doesn't work, type  X <return>  to quit.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.


Package biblatex Warning: Invalid option datatype 'integer'.
(biblatex)                Defaulting to 'boolean'.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@dates 
l.11616 \abx@dodates
                    
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@dates 
l.11616 \abx@dodates
                    
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@dates 
l.11616 \abx@dodates
                    
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.


! LaTeX Error: Missing \begin{document}.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.11621 \abx@dodates
                    
You're in trouble here.  Try typing  <return>  to proceed.
If that doesn't work, type  X <return>  to quit.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.11845 \abx@donames
                    
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.11845 \abx@donames
                    
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.11845 \abx@donames
                    
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.11845 \abx@donames
                    
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.11845 \abx@donames
                    
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.11845 \abx@donames
                    
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.11845 \abx@donames
                    
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.11845 \abx@donames
                    
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.11845 \abx@donames
                    
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \blx@datamodel@names 
l.11845 \abx@donames
                    
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Use of \the doesn't match its definition.
\@defdefault@ds ...\edef \default@ds {\the \toks@ 
                                                  }
l.11899      \blx@tempa}}
                         
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11913 \setkeys{blx@opt@ldt}{style=numeric}
                                            
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.11925 ...r,maxparens=3,bibencoding=auto,bibwarn}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

Package biblatex Info: Trying to load compatibility code...
Package biblatex Info: ... file 'blx-compat.def' found.
(/usr/share/texmf/tex/latex_2015/biblatex/blx-compat.def
File: blx-compat.def 2016/05/14 v3.4 biblatex compatibility (PK/JW/AB)

! Use of \the doesn't match its definition.
\g@addto@macro ...fter {#1#2}\xdef #1{\the \toks@ 
                                                  }\endgroup 
l.11        I'm ignoring this command}}}
                                        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\@declareoption ...e ds@#1\endcsname {\the \toks@ 
                                                  }
l.21 ...b}{\ExecuteBibliographyOptions{block=par}}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

)
! Use of \the doesn't match its definition.
\g@addto@macro ...fter {#1#2}\xdef #1{\the \toks@ 
                                                  }\endgroup 
l.11938 \ProcessOptions*
                        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

Package biblatex Info: Trying to load generic definitions...
Package biblatex Info: ... file 'biblatex.def' found.
(./biblatex.def
File: biblatex.def 2016/05/14 v3.4 biblatex compatibility (PK/JW/AB)

! Undefined control sequence.
l.23 ...andafter{\blx@datamodel@constant@nameparts
                                                  }
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \the doesn't match its definition.
<write> ...=\string \count \the \allocationnumber 
                                                  
l.139 \newcounter{textcitecount}
                                
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

\c@textcitecount=\count
! Use of \the doesn't match its definition.
<write> ...=\string \count \the \allocationnumber 
                                                  
l.140 \newcounter{textcitetotal}
                                
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

\c@textcitetotal=\count
! Use of \the doesn't match its definition.
<write> ...=\string \count \the \allocationnumber 
                                                  
l.147 \newcounter{textcitemaxnames}
                                   
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

\c@textcitemaxnames=\count
! Use of \the doesn't match its definition.
<write> ...=\string \count \the \allocationnumber 
                                                  
l.231 \newcounter{biburlnumpenalty}
                                   
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

\c@biburlnumpenalty=\count
! Use of \the doesn't match its definition.
<write> ...=\string \count \the \allocationnumber 
                                                  
l.232 \newcounter{biburlucpenalty}
                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

\c@biburlucpenalty=\count
! Use of \the doesn't match its definition.
<write> ...=\string \count \the \allocationnumber 
                                                  
l.233 \newcounter{biburllcpenalty}
                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

\c@biburllcpenalty=\count
! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1133 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1133 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1143 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1143 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1143 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1143 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1143 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1143 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1143 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1181 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1181 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1181 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1181 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1181 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1181 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1181 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1181 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1181 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1181 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1181 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1181 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1181 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1181 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1181 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1181 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1181 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1181 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1181 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1181 }
        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \the doesn't match its definition.
\KV@@sp@c ...KV@toks@ {#1}\edef #3{\the \KV@toks@ 
                                                  }
l.1181 }
        
(That makes 100 errors; please try again.) 
Here is how much of TeX's memory you used:
 6416 strings out of 256214
 103994 string characters out of 1917000
 260546 words of memory out of 1500000
 9714 multiletter control sequences out of 10000+200000
 3640 words of font info for 14 fonts, out of 1200000 for 2000
 645 hyphenation exceptions out of 8191
 31i,0n,30p,817b,196s stack positions out of 5000i,500n,6000p,200000b,15000s

!  ==> Fatal error occurred, no output PDF file produced!
